From fe2f5d1104b0bfd0ebdb99189f059f614240d6a5 Mon Sep 17 00:00:00 2001
From: Cristy <urban-warrior@imagemagick.org>
Date: Sun, 23 Jul 2017 11:16:40 -0400
Subject: [PATCH] CVE-2017-11532: memory leak

When Imagemagick processes a crafted file in convert, it can lead to a Memory Leak in the WriteMPCImage() function in coders/mpc.c.

The previous fix was incomplete

bug: https://github.com/ImageMagick/ImageMagick/issues/563
origin:  https://github.com/ImageMagick/ImageMagick/commit/8b67f60a28e03ce63a2fce75f13bbc6e4487ff4b
bug-debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=869726
---
 coders/mpc.c | 125 ++++-------------------------------------------------------
 1 file changed, 8 insertions(+), 117 deletions(-)

diff --git a/coders/mpc.c b/coders/mpc.c
index 335857474..b32fa7d89 100644
--- a/coders/mpc.c
+++ b/coders/mpc.c
@@ -862,7 +862,7 @@ static Image *ReadMPCImage(const ImageInfo *image_info,ExceptionInfo *exception)
           Create image colormap.
         */
         packet_size=(size_t) (3UL*depth/8UL);
-        if ((MagickSizeType) (packet_size*image->colors) > GetBlobSize(image))
+        if ((packet_size*image->colors) > GetBlobSize(image))
           ThrowReaderException(CorruptImageError,"InsufficientImageDataInFile");
         image->colormap=(PixelPacket *) AcquireQuantumMemory(image->colors+1,
           sizeof(*image->colormap));
@@ -1083,27 +1083,6 @@ ModuleExport void UnregisterMPCImage(void)
 %    o image: the image.
 %
 */
-
-static inline int open_utf8(const char *path,int flags,mode_t mode)
-{
-#if !defined(MAGICKCORE_WINDOWS_SUPPORT) || defined(__CYGWIN__) || defined(__MINGW32__) || defined(__MINGW64__)
-  return(open(path,flags,mode));
-#else
-   int
-     status;
-
-   wchar_t
-     *path_wide;
-
-   path_wide=create_wchar_path(path);
-   if (path_wide == (wchar_t *) NULL)
-     return(-1);
-   status=_wopen(path_wide,flags,mode);
-   path_wide=(wchar_t *) RelinquishMagickMemory(path_wide);
-   return(status);
-#endif
-}
-
 static MagickBooleanType WriteMPCImage(const ImageInfo *image_info,Image *image)
 {
   char
@@ -1114,18 +1093,13 @@ static MagickBooleanType WriteMPCImage(const ImageInfo *image_info,Image *image)
     *property,
     *value;
 
-  int
-    destination;
-
   MagickBooleanType
     status;
 
   MagickOffsetType
+    offset,
     scene;
 
-  MagickSizeType
-    length;
-
   register ssize_t
     i;
 
@@ -1133,12 +1107,6 @@ static MagickBooleanType WriteMPCImage(const ImageInfo *image_info,Image *image)
     depth,
     one;
 
-  ssize_t
-    count;
-
-  unsigned char
-    *pixels;
-
   /*
     Open persistent cache.
   */
@@ -1154,6 +1122,7 @@ static MagickBooleanType WriteMPCImage(const ImageInfo *image_info,Image *image)
   (void) CopyMagickString(cache_filename,image->filename,MaxTextExtent);
   AppendImageFormat("cache",cache_filename);
   scene=0;
+  offset=0;
   one=1;
   do
   {
@@ -1392,7 +1361,7 @@ static MagickBooleanType WriteMPCImage(const ImageInfo *image_info,Image *image)
                 {
                   if (value[i] == (int) '}')
                     (void) WriteBlobByte(image,'\\');
-                  (void) WriteBlobByte(image,(unsigned char) value[i]);
+                  (void) WriteBlobByte(image,value[i]);
                 }
               (void) WriteBlobByte(image,'}');
             }
@@ -1504,90 +1473,12 @@ static MagickBooleanType WriteMPCImage(const ImageInfo *image_info,Image *image)
         colormap=(unsigned char *) RelinquishMagickMemory(colormap);
       }
     /*
-      Persistent pixel cache.
+      Initialize persistent pixel cache.
     */
-    destination=open_utf8(cache_filename,O_WRONLY | O_CREAT | O_BINARY,S_MODE);
-    if (destination == -1)
-      ThrowWriterException(CacheError,"UnableToPersistPixelCache");
-    pixels=(unsigned char *)  GetPixelCachePixels(image,&length,
+    status=PersistPixelCache(image,cache_filename,MagickFalse,&offset,
       &image->exception);
-    if (pixels == (unsigned char *) NULL)
-      {
-        int
-          source;
-
-        register MagickOffsetType
-          i;
-
-        size_t
-          quantum;
-
-        struct stat
-          file_stats;
-
-        unsigned char
-          *buffer;
-
-        /*
-          Persist disk-based pixel cache to disk.
-        */
-        source=open_utf8(GetPixelCacheFilename(image),O_RDONLY | O_BINARY,0);
-        if (source == -1)
-          ThrowWriterException(CacheError,"UnableToPersistPixelCache");
-        quantum=(size_t) MagickMaxBufferExtent;
-        if ((fstat(source,&file_stats) == 0) && (file_stats.st_size > 0))
-          quantum=(size_t) MagickMin(file_stats.st_size,MagickMaxBufferExtent);
-        buffer=(unsigned char *) AcquireQuantumMemory(quantum,sizeof(*buffer));
-        if (buffer == (unsigned char *) NULL)
-          {
-            (void) close(source);
-            ThrowWriterException(CacheError,"UnableToPersistPixelCache");
-          }
-        for (i=0; (count=read(source,buffer,quantum)) > 0; )
-        {
-          ssize_t
-            number_bytes;
-
-          number_bytes=write(destination,buffer,(size_t) count);
-          if (number_bytes != count)
-            break;
-          i+=number_bytes;
-        }
-        buffer=(unsigned char *) RelinquishMagickMemory(buffer);
-        (void) close(destination);
-        (void) close(source);
-        if (i < (MagickOffsetType) length)
-          ThrowWriterException(CacheError,"UnableToPersistPixelCache");
-      }
-    else
-      {
-        register MagickOffsetType
-          i;
-
-        /*
-          Persist in-memory pixel cache to disk.
-        */
-        count=0;
-        for (i=0; i < (MagickOffsetType) length; i+=count)
-        {
-#if !defined(MAGICKCORE_HAVE_PWRITE)
-          count=write(destination,pixels+i,(size_t) MagickMin(length-i,(size_t)
-            SSIZE_MAX));
-#else
-          count=pwrite(destination,pixels+i,(size_t) MagickMin(length-i,(size_t)
-            SSIZE_MAX),(off_t) i);
-#endif   
-          if (count <= 0)
-            {
-              count=0;
-              if (errno != EINTR)
-                break;
-            }
-        }
-        (void) close(destination);
-        if (i < (MagickOffsetType) length)
-          ThrowWriterException(CacheError,"UnableToPersistPixelCache");
-      }
+    if (status == MagickFalse)
+      ThrowWriterException(CacheError,"UnableToPersistPixelCache");
     if (GetNextImageInList(image) == (Image *) NULL)
       break;
     image=SyncNextImageInList(image);
