From 9a4fa81c503e6eb0e10606eac01fe03af08ea9b8 Mon Sep 17 00:00:00 2001
From: Cristy <urban-warrior@imagemagick.org>
Date: Tue, 4 Jul 2017 14:17:30 -0400
Subject: [PATCH] CVE-2017-11446

The ReadPESImage function in coders\pes.c has an infinite loop vulnerability that can cause CPU exhaustion via a crafted PES file.

bug: https://github.com/ImageMagick/ImageMagick/issues/537
bug-debian: https://bugs.debian.org/868950
origin: https://github.com/ImageMagick/ImageMagick/commit/96182884778bfc43d6a9a0abd90cedb5d8cf8977, https://github.com/ImageMagick/ImageMagick/commit/2c8790da11468bd207c1400b19237a8838329d12

(cherry picked from commit 96182884778bfc43d6a9a0abd90cedb5d8cf8977)
---
 coders/pes.c | 11 ++++++++---
 1 file changed, 8 insertions(+), 3 deletions(-)

diff --git a/coders/pes.c b/coders/pes.c
index 8140b13ce..69a425863 100644
--- a/coders/pes.c
+++ b/coders/pes.c
@@ -535,7 +535,7 @@ static Image *ReadPESImage(const ImageInfo *image_info,ExceptionInfo *exception)
   j=0;
   delta_x=0;
   delta_y=0;
-  while (EOFBlob(image) != EOF)
+  while (EOFBlob(image) == MagickFalse)
   {
     x=ReadBlobByte(image);
     y=ReadBlobByte(image);
@@ -621,6 +621,11 @@ static Image *ReadPESImage(const ImageInfo *image_info,ExceptionInfo *exception)
   j++;
   blocks[j].offset=(ssize_t) i;
   number_blocks=(size_t) j;
+  image->columns=bounds.x2-bounds.x1;
+  image->rows=bounds.y2-bounds.y1;
+  status=SetImageExtent(image,image->columns,image->rows);
+  if (status == MagickFalse)
+    return(DestroyImageList(image));
   /*
     Write stitches as SVG file.
   */
@@ -634,8 +639,8 @@ static Image *ReadPESImage(const ImageInfo *image_info,ExceptionInfo *exception)
   (void) FormatLocaleFile(file,"<svg xmlns=\"http://www.w3.org/2000/svg\" "
     "xlink=\"http://www.w3.org/1999/xlink\" "
     "ev=\"http://www.w3.org/2001/xml-events\" version=\"1.1\" "
-    "baseProfile=\"full\" width=\"%g\" height=\"%g\">\n",bounds.x2-bounds.x1,
-    bounds.y2-bounds.y1);
+    "baseProfile=\"full\" width=\"%g\" height=\"%g\">\n",(double)
+    image->columns,(double) image->rows);
   for (i=0; i < (ssize_t) number_blocks; i++)
   {
     offset=blocks[i].offset;
